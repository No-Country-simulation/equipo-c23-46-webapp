// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  WORKER
  STUDENT
}

model User {
  id        String   @id @default(uuid())
  name      String
  lastName  String
  password  String
  email     String   @unique
  birthdate DateTime
  age       Int
  dni       String   @unique
  isActived Boolean  @default(true)
  role      Role

  //relacion uno a uno
  Student Student?
  //relacion uno a uno
  Worker  Worker?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActived])
}

model Student {
  id          String @id @default(uuid())
  proxy       String
  phone_proxy String
  dni_proxy   String

  //relacion uno a uno
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  grade   Grade? @relation(fields: [gradeId], references: [id])
  gradeId String

  notas notas[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Worker {
  id         String   @id @default(uuid())
  position   String
  salary     Float
  start_date DateTime
  phone      String

  //relacion uno a uno
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Grade       Grade[]
  GradeCourse GradeCourse[]
}

model Grade {
  id          String @id @default(uuid())
  school_year Int
  grade       String
  section     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tutor   Worker? @relation(fields: [tutorId], references: [id])
  tutorId String

  Student     Student[]
  GradeCourse GradeCourse[]
}

model GradeCourse {
  id String @id @default(uuid())

  grade   Grade  @relation(fields: [gradeId], references: [id])
  gradeId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  teacher   Worker @relation(fields: [teacherId], references: [id])
  teacherId String

  notas     notas[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id   String @id @default(uuid())
  name String

  GradeCourse GradeCourse[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model notas {
  id         String  @id @default(uuid())
  capacity   String?
  competence String?
  note       Int

  gradeCourse   GradeCourse @relation(fields: [gradeCourseId], references: [id])
  gradeCourseId String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
